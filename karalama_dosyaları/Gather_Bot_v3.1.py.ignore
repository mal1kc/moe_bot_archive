# Source Generated with Decompyle++
# File: Gather_Bot_v3.1.pyc (Python 3.10)

import multiprocessing as mp
import os
import socket
import subprocess
import threading
import winreg
import zipfile
from multiprocessing import Manager, Pool, freeze_support

import getmac
import mouse


def resource_path(relative_path):
    pass
# WARNING: Decompyle incomplete


def process_check(process_name):
    call = ('TASKLIST', '/FI', 'imagename eq %s' % process_name)
    output = subprocess.check_output(call).decode()
    last_line = output.strip().split('\r\n')[-1]
    return last_line.lower().startswith(process_name.lower())

f = open('Depe/Discord_Key.txt', 'r')
discord_key_client = f.read()
f.close()
from tkinter import *
from tkinter import messagebox


def display_pannel():
    global accuracy, delay, samay
    Image = Image
    ImageTk = ImageTk
    import PIL
    
    def filter_finder():
        filter_val = entry.get()
        my_file = open('filter.txt', 'w', **('mode',))
        my_file.write(str(filter_val))
        my_file.close()

    
    def Filter():
        global entry
        top = Toplevel()
        top.iconbitmap(resource_path('bot.ico'))
        top.title('Filter')
        Entry_Frame = LabelFrame(top, 'Filter Percentage', 20, 20, '#990000', 'white', **('text', 'padx', 'pady', 'fg', 'bg'))
        percent_label = Label(Entry_Frame, '%', '#990000', 'white', **('text', 'fg', 'bg')).grid(0, 1, **('row', 'column'))
        consult = Label(Entry_Frame, 25, 'Please Consult Before Changing This Feature', '#990000', 'white', **('padx', 'text', 'fg', 'bg')).grid(0, 2, **('row', 'column'))
        entry = Entry(Entry_Frame, 10, **('width',))
        entry.grid(0, 0, **('row', 'column'))
        time = Button(Entry_Frame, 'Set', 10, filter_finder, **('text', 'padx', 'command')).grid(1, 0, **('row', 'column'))
        Entry_Frame.grid(0, 0, **('row', 'column'))

    root = Tk()
    root.iconbitmap(resource_path('bot.ico'))
    root.title("Levi's Gather Bot v_3.2")
    img = ImageTk.PhotoImage(Image.open(resource_path('background.jpg')))
    label = Label(img, **('image',))
    label.grid(0, 0, 4, **('row', 'column', 'columnspan'))
    Scanner_Button = Button(root, 'Filter', 25, Filter, 'white', '#990000', **('text', 'padx', 'command', 'fg', 'bg')).grid(4, 1, **('row', 'column'))
    Entry_Frame = LabelFrame(root, 'Select Time', 20, 20, **('text', 'padx', 'pady'))
    entry_hour = Entry(Entry_Frame, 5, **('width',))
    entry_min = Entry(Entry_Frame, 5, **('width',))
    
    def time_finder():
        global hours, hours, mins, mins, hours, mins
        val1 = entry_hour.get()
        val2 = entry_min.get()
        if val1 == '':
            hours = 0
        else:
            hours = val1
        if val2 == '' and val1 != '':
            mins = 0
            return None
        if None == '' and val1 == '':
            mins = 0
            hours = 10
            return None
        if None != '':
            mins = val2
            return None

    entry_hour.grid(0, 0, **('row', 'column'))
    h_label = Label(Entry_Frame, 'H', **('text',)).grid(0, 1, **('row', 'column'))
    entry_min.grid(0, 2, **('row', 'column'))
    m_label = Label(Entry_Frame, 'M', **('text',)).grid(0, 3, **('row', 'column'))
    Information_Frame = LabelFrame(root, 'Contact Information', '#990000', 20, 20, **('text', 'fg', 'padx', 'pady'))
    label = Label(Information_Frame, 'Line id : botsmoe', '#990000', **('text', 'fg')).grid(0, 0, **('row', 'column'))
    label = Label(Information_Frame, 'Discord : LEVI#1709', '#990000', **('text', 'fg')).grid(1, 0, **('row', 'column'))
    label = Label(Information_Frame, 'automationexperts.org@gmail.com', '#990000', **('text', 'fg')).grid(2, 0, **('row', 'column'))
    March_Frame = LabelFrame(root, 'No. of marches', 20, 20, **('text', 'padx', 'pady'))
    entry_march = Entry(March_Frame, 5, **('width',))
    entry_march.grid(0, 0, **('row', 'column'))
    
    def March_Finder():
        global marches
        val = entry_march.get()
        if val == '':
            val = 6
        marches = val

    
    def Swift_Finder():
        global swift_val
        curr_val = swiftt.get()
        swift_val = curr_val

    options = [
        [
            'Swift March ',
            1],
        [
            'Normal March ',
            2]]
    swiftt = IntVar()
    Swift_Frame = LabelFrame(root, 'March Type ', 20, 20, **('text', 'padx', 'pady'))
    c = 0
    for text, val in options:
        R_button = Radiobutton(Swift_Frame, text, swiftt, val, Swift_Finder, **('text', 'variable', 'value', 'command')).grid(c, 0, **('row', 'column'))
        c += 1
    Check_Box_Frame = LabelFrame(root, 'Tile Type', 30, 20, **('text', 'padx', 'pady'))
    one = IntVar()
    two = IntVar()
    three = IntVar()
    four = IntVar()
    five = IntVar()
    six = IntVar()
    seven = IntVar()
    
    def food_finder():
        global food
        curr_val = one.get()
        food = curr_val

    
    def wood_finder():
        global wood
        curr_val = two.get()
        wood = curr_val

    
    def iron_finder():
        global iron
        curr_val = three.get()
        iron = curr_val

    
    def stone_finder():
        global stone
        curr_val = four.get()
        stone = curr_val

    
    def silver_finder():
        global silver
        curr_val = five.get()
        silver = curr_val

    
    def gold_finder():
        global gold
        curr_val = six.get()
        gold = curr_val

    
    def All_Tiles():
        global all_tile
        curr_val = seven.get()
        all_tile = curr_val

    c1 = Checkbutton(Check_Box_Frame, one, 'Food', **('variable', 'text')).grid(0, 0, **('row', 'column'))
    c2 = Checkbutton(Check_Box_Frame, two, 'Wood', **('variable', 'text')).grid(0, 1, **('row', 'column'))
    c3 = Checkbutton(Check_Box_Frame, three, 'Iron', **('variable', 'text')).grid(0, 3, **('row', 'column'))
    c4 = Checkbutton(Check_Box_Frame, four, 'Stone', **('variable', 'text')).grid(0, 2, **('row', 'column'))
    c5 = Checkbutton(Check_Box_Frame, five, 'Silver', **('variable', 'text')).grid(0, 4, **('row', 'column'))
    c6 = Checkbutton(Check_Box_Frame, seven, 'ALL', **('variable', 'text')).grid(0, 6, **('row', 'column'))
    c7 = Checkbutton(Check_Box_Frame, six, 'Gold', **('variable', 'text')).grid(0, 5, **('row', 'column'))
    Check_Box_Level = LabelFrame(root, 'Tile Lvl', 30, 20, **('text', 'padx', 'pady'))
    
    def All_Finder():
        food_finder()
        wood_finder()
        iron_finder()
        stone_finder()
        silver_finder()
        gold_finder()
        All_Tiles()

    l_1 = IntVar()
    l_2 = IntVar()
    l_3 = IntVar()
    l_4 = IntVar()
    l_5 = IntVar()
    l_6 = IntVar()
    l_7 = IntVar()
    l_8 = IntVar()
    l_9 = IntVar()
    l_10 = IntVar()
    l_11 = IntVar()
    
    def l1_finder():
        global lvl_1
        curr_val = l_1.get()
        lvl_1 = curr_val

    
    def l2_finder():
        global lvl_2
        curr_val = l_2.get()
        lvl_2 = curr_val

    
    def l3_finder():
        global lvl_3
        curr_val = l_3.get()
        lvl_3 = curr_val

    
    def l4_finder():
        global lvl_4
        curr_val = l_4.get()
        lvl_4 = curr_val

    
    def l5_finder():
        global lvl_5
        curr_val = l_5.get()
        lvl_5 = curr_val

    
    def l6_finder():
        global lvl_6
        curr_val = l_6.get()
        lvl_6 = curr_val

    
    def l7_finder():
        global lvl_7
        curr_val = l_7.get()
        lvl_7 = curr_val

    
    def l8_finder():
        global lvl_8
        curr_val = l_8.get()
        lvl_8 = curr_val

    
    def l9_finder():
        global lvl_9
        curr_val = l_9.get()
        lvl_9 = curr_val

    
    def l10_finder():
        global lvl_10
        curr_val = l_10.get()
        lvl_10 = curr_val

    
    def l11_finder():
        global lvl_11
        curr_val = l_11.get()
        lvl_11 = curr_val

    c11 = Checkbutton(Check_Box_Frame, l_1, '1', **('variable', 'text')).grid(1, 10, **('row', 'column'))
    c22 = Checkbutton(Check_Box_Frame, l_2, '2', **('variable', 'text')).grid(1, 9, **('row', 'column'))
    c33 = Checkbutton(Check_Box_Frame, l_3, '3', **('variable', 'text')).grid(1, 8, **('row', 'column'))
    c44 = Checkbutton(Check_Box_Frame, l_4, '4', **('variable', 'text')).grid(1, 7, **('row', 'column'))
    c55 = Checkbutton(Check_Box_Frame, l_5, '5', **('variable', 'text')).grid(1, 6, **('row', 'column'))
    c66 = Checkbutton(Check_Box_Frame, l_6, '6', **('variable', 'text')).grid(1, 5, **('row', 'column'))
    c77 = Checkbutton(Check_Box_Frame, l_7, '7', **('variable', 'text')).grid(1, 4, **('row', 'column'))
    c88 = Checkbutton(Check_Box_Frame, l_8, '8', **('variable', 'text')).grid(1, 3, **('row', 'column'))
    c99 = Checkbutton(Check_Box_Frame, l_9, '9', **('variable', 'text')).grid(1, 2, **('row', 'column'))
    c1010 = Checkbutton(Check_Box_Frame, l_10, '10', **('variable', 'text')).grid(1, 1, **('row', 'column'))
    c1111 = Checkbutton(Check_Box_Frame, l_11, '11', **('variable', 'text')).grid(1, 0, **('row', 'column'))
    
    def All_lvl_Finder():
        l1_finder()
        l2_finder()
        l3_finder()
        l4_finder()
        l5_finder()
        l6_finder()
        l7_finder()
        l8_finder()
        l9_finder()
        l10_finder()
        l11_finder()

    Tweak_Frame = LabelFrame(root, 'Delay', 20, 20, **('text', 'padx', 'pady'))
    tweakk = DoubleVar()
    
    def Tweaker_Finder():
        global tweaker
        curr_value = scale.get()
        tweaker = curr_value

    scale = Scale(Tweak_Frame, 0, 10, HORIZONTAL, **('from_', 'to', 'orient'))
    scale.grid(0, 0, **('row', 'column'))
    
    def killer():
        March_Finder()
        All_lvl_Finder()
        time_finder()
        All_Finder()
        Tweaker_Finder()
        root.destroy()

    Button(root, 'Start', '#990000', 'white', 130, 10, killer, GROOVE, **('text', 'bg', 'fg', 'padx', 'pady', 'command', 'relief')).grid(4, 0, 1, **('row', 'column', 'columnspan'))
    Check_Box_Frame.grid(2, 0, 20, 10, 2, **('row', 'column', 'padx', 'pady', 'columnspan'))
    Entry_Frame.grid(3, 0, 10, **('row', 'column', 'pady'))
    March_Frame.grid(2, 2, 20, **('row', 'column', 'padx'))
    Tweak_Frame.grid(3, 1, **('row', 'column'))
    Information_Frame.grid(3, 2, **('row', 'column'))
    root.mainloop()
    s = open('filter.txt', 'r', **('mode',))
    amat = s.read()
    accuracy = int(amat) * 0.01
    s.close()
    delay = tweaker * 0.1
    samay = float(hours) * 60 * 60 + float(mins) * 60

import os
import time

import cv2 as cv
import keyboard
import numpy as np
import pyautogui as py
import win32api
import win32con


def click(x, y):
    py.click(x, y)

import os
import platform
import random
import subprocess
import time

import cv2
import numpy as np
import pyautogui


def imagesearch(image, precision = (0.8,)):
    im = pyautogui.screenshot()
    if is_retina:
        im.thumbnail((round(im.size[0] * 0.5), round(im.size[1] * 0.5)))
    img_rgb = np.array(im)
    img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)
    template = cv2.imread(image, 0)
    template.shape[::-1]
    res = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)
    (min_val, max_val, min_loc, max_loc) = cv2.minMaxLoc(res)
    if max_val < precision:
        return [
            -1,
            -1]


def resource_path(relative_path):
    ''' Get absolute path to resource, works for dev and for PyInstaller '''
    pass
# WARNING: Decompyle incomplete


def imagesearch_numLoop_self(image, maxSamples, precision, reg):
    pos = py.locateOnScreen(image, reg, precision, **('region', 'confidence'))
    count = 0
    if pos == None:
        print(image + ' not found, waiting')
        pos = py.locateOnScreen(image, reg, precision, **('region', 'confidence'))
        count = count + 1
        if count > maxSamples:
            pass
        elif pos == None or pos != None:
            pos = py.center(pos)
            return pos
    return pos

import os

import cv2 as cv197
import numpy as np

f = open('Depe/human_mode.txt', 'r')
human_mode = f.read()
f.close()
f = open('Depe/delay.txt', 'r')
movement_speed = int(f.read())
f.close()
f = open('Depe/restart_time.txt', 'r')
restart_time = float(f.read()) * 60
f.close()
f = open('Depe/wait_val.txt', 'r')
content = float(f.read())
wait_val = content
f.close()
if human_mode == 'off':
    movement_speed = 1

def findClickPositions(needle_img, haystack_img, threshold, eps_val = (0.5, 0.5)):
    needle_w = needle_img.shape[1]
    needle_h = needle_img.shape[0]
    result = cv.matchTemplate(haystack_img, needle_img, cv.TM_CCOEFF_NORMED)
    locations = np.where(result >= threshold)
# WARNING: Decompyle incomplete


def imagesearch_numLoop_self(image, maxSamples, precision, reg = (None,)):
    pos = py.locateOnScreen(image, reg, precision, **('region', 'confidence'))
    count = 0
    if pos == None:
        print(image + ' not found, waiting')
        pos = py.locateOnScreen(image, reg, precision, **('region', 'confidence'))
        count = count + 1
        if count > maxSamples:
            pass
        elif pos == None or pos != None:
            pos = py.center(pos)
            return pos
    return pos


def imagesearch_numLoop_self(image, maxSamples, precision, reg):
    pos = py.locateOnScreen(image, reg, precision, **('region', 'confidence'))
    count = 0
    if pos == None:
        pos = py.locateOnScreen(image, reg, precision, **('region', 'confidence'))
        count = count + 1
        if count > maxSamples:
            pass
        elif pos == None or pos != None:
            pos = py.center(pos)
            return pos
    return pos

f = open('Depe/c_speed.txt', 'r')
c_speed = float(f.read())
f.close()
f = open('Depe/name.txt', 'r')
Game_Name = f.read()
f.close()

def Game_Running():
    return process_check(Game_Name)

f = open('Depe/Crash_Detection.txt', 'r')
crash_value = str(f.read())
f.close()
f = open('method.txt', 'r')
b_method = int(f.read())
f.close()
f = open('Depe/double_check.txt', 'r')
double_check = f.read()
f.close()
f = open('Depe/wait_click.txt', 'r')
wait_click = float(f.read())
f.close()
f = open('interval.txt', 'r')
w_interval = float(f.read())
f.close()
import bezier

pyautogui.MINIMUM_DURATION = 0
pyautogui.MINIMUM_SLEEP = 0
pyautogui.PAUSE = 0

def mod(x):
    if x < 0:
        return -1 * x


def move_mouse(x, y):
    start = pyautogui.position()
    end = (x, y)
    mid_x = start[0] + mod(start[1] - start[0]) // 20
    mid_x2 = start[0] + mod(start[1] - start[0]) // 18
    mid_y = start[1] + mod(start[1] - start[0]) // 20
    mid_y2 = start[1] + mod(start[1] - start[0]) // 18
    control1 = (mid_x, mid_y)
    control2 = (mid_x2, mid_y2)
    control_points = np.array([
        start,
        control1,
        control2,
        end])
    points = np.array([
        control_points[(:, 0)],
        control_points[(:, 1)]])
    degree = 3
    curve = bezier.Curve(points, degree)
    curve_steps = movement_speed
    delay = 0.002
    for i in range(1, curve_steps + 1):
        (x, y) = curve.evaluate(i / curve_steps)
        pyautogui.moveTo(x, y)
        pyautogui.sleep(delay)

f = open('Depe/march_type.txt', 'r')
march_type = int(f.read())
f.close()
f = open('Depe/delay_1.txt', 'r')
delay_1 = float(f.read())
f.close()
f = open('Depe/delay_2.txt', 'r')
delay_2 = float(f.read())
f.close()
f = open('Depe/Video_length.txt', 'r')
video_length = float(f.read())
f.close()
import discord
from discord.ext import commands


def discord_commander(cmd_number, server_arr, discord_key_arr):
    discord_key = 'none'
    time.sleep(1)
    if server_arr[0] == -1:
        return None
    if None[0] == 1:
        b = (lambda .0 = None: [ chr(discord_key_arr[i]) for i in .0 ])(range(discord_key_arr[119]))
        discord_key = ''
        for i in b[0:len(b)]:
            discord_key += i
        discord_key = str(discord_key)
    
    if discord_key == 'none':
        return None
    bot = None.Bot('.', **('command_prefix',))
    
    async def retry(ctx):
        pass
    # WARNING: Decompyle incomplete

    retry = bot.command()(retry)
    
    async def hello(ctx):
        pass
    # WARNING: Decompyle incomplete

    hello = bot.command()(hello)
    
    async def pic(ctx):
        pass
    # WARNING: Decompyle incomplete

    pic = bot.command()(pic)
    
    async def video(ctx):
        pass
    # WARNING: Decompyle incomplete

    video = bot.command()(video)
    
    async def about(ctx):
        pass
    # WARNING: Decompyle incomplete

    about = bot.command()(about)
    
    async def startbot(ctx = None):
        pass
    # WARNING: Decompyle incomplete

    startbot = None(startbot)
    
    async def stopbot(ctx = None):
        pass
    # WARNING: Decompyle incomplete

    stopbot = None(stopbot)
    
    async def stopgame(ctx = None):
        pass
    # WARNING: Decompyle incomplete

    stopgame = None(stopgame)
    
    async def stopsteam(ctx = None):
        pass
    # WARNING: Decompyle incomplete

    stopsteam = None(stopsteam)
    
    async def startgame(ctx = None):
        pass
    # WARNING: Decompyle incomplete

    startgame = None(startgame)
    
    async def status(ctx = None):
        pass
    # WARNING: Decompyle incomplete

    status = None(status)
    bot.run(discord_key)


def windows_1920(cmd_number, settings, server_arr, discord_key_arr):
    global location_opener_stuck, wait_span
    dir = 'img_1920/'
    time.sleep(1)
    if server_arr[0] == -1:
        return None
    if None[0] == 1:
        display_pannel()
    
    f = open('location_opener_stuck.txt', 'r')
    location_opener_stuck = f.read()
    f.close()
    
    def check_for_disturbance():
        dir = ''
        wood_screen = py.locateOnScreen(resource_path(dir + 'img_1920/wood_screen.png'), (0, 13, 60, 60), 0.75, **('region', 'confidence'))
        if wood_screen != None:
            pyautogui.click('right', 1, **('button', 'clicks'))
            time.sleep(0.2)
        food_check = py.locateOnScreen(resource_path(dir + 'img_1920/food_check2.png'), (1852, 46, 54, 54), 0.55, **('region', 'confidence'))
        if food_check != None:
            move_mouse(55, 978)
            py.click(55, 978)
            time.sleep(0.6)
        ok = pyautogui.locateOnScreen(resource_path(dir + 'img_1920/ok.png'), (852, 639, 187, 65), 0.65, **('region', 'confidence'))
        if ok != None:
            time.sleep(0.25)
            ok = pyautogui.center(ok)
            move_mouse(ok[0], ok[1])
            py.click(ok[0], ok[1])
        search_b = py.locateOnScreen(resource_path('img_1920/search_bar.png'), (1094, 134, 97, 76), **('region',))
        if search_b != None:
            py.click('right', 1, **('button', 'clicks'))
        if crash_value == 'On' or crash_value == 'on':
            game_value = Game_Running()
            if game_value == False:
                game_restart()
        shield_checker()

    
    def check_for_disturbance_global():
        haystack_img1 = py.screenshot((98, 800, 61, 34), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2BGR)
        needle_img1 = cv.imread(resource_path(dir + 'tang.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2BGR)
        continue_lady = findClickPositions(needle_img1, haystack_img1, 0.8, 0.8)
        if len(continue_lady) > 0:
            py.click(459, 999)
        haystack_img1 = py.screenshot((0, 13, 60, 60), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2BGR)
        needle_img1 = cv.imread(resource_path(dir + 'wood_screen.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2BGR)
        wood_screen = findClickPositions(needle_img1, haystack_img1, 0.5)
        if len(wood_screen) > 0:
            py.click('right', 1, **('button', 'clicks'))
            time.sleep(0.2)
        haystack_img1 = py.screenshot((1852, 46, 54, 54), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2BGR)
        needle_img1 = cv.imread(resource_path(dir + 'food_check2.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2BGR)
        food_check = findClickPositions(needle_img1, haystack_img1, 0.5)
        if len(food_check) > 0:
            click(55, 978)
            time.sleep(0.6)
        haystack_img1 = py.screenshot((830, 646, 230, 86), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2BGR)
        needle_img1 = cv.imread(resource_path(dir + 'ok.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2BGR)
        ok = findClickPositions(needle_img1, haystack_img1, 0.5)
        if len(ok) > 0:
            time.sleep(0.2)
            ok = pyautogui.locateOnScreen(resource_path(dir + 'ok.png'), (852, 639, 187, 65), 0.65, **('region', 'confidence'))
            
            try:
                ok = pyautogui.center(ok)
                click(ok[0], ok[1])
            finally:
                pass
            print('missed')
            haystack_img1 = py.screenshot((1211, 80, 57, 280), **('region',))
            haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2BGR)
            needle_img1 = cv.imread(resource_path(dir + 'cross.png'), cv.IMREAD_UNCHANGED)
            needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2BGR)
            cross = findClickPositions(needle_img1, haystack_img1, 0.5)
            if len(cross) > 0:
                py.click('right', 1, **('button', 'clicks'))

        search_b = py.locateOnScreen(resource_path('img_1920/search_bar.png'), (1094, 134, 97, 76), **('region',))
        if search_b != None:
            py.click('right', 1, **('button', 'clicks'))
        haystack_img1 = py.screenshot((36, 28, 48, 38), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2BGR)
        needle_img1 = cv.imread(resource_path(dir + 'para_army.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2BGR)
        para_army = findClickPositions(needle_img1, haystack_img1, 0.7)
        if len(para_army) > 0:
            py.click('right', 1, **('button', 'clicks'))
            time.sleep(0.3)
            py.click('right', 1, **('button', 'clicks'))
        haystack_img1 = py.screenshot((910, 692, 84, 35), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2BGR)
        needle_img1 = cv.imread(resource_path(dir + 'retry.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2BGR)
        retry = findClickPositions(needle_img1, haystack_img1, 0.7)
        if len(retry) > 0:
            retry_checker()
        if crash_value == 'On' or crash_value == 'on':
            game_value = Game_Running()
            if game_value == False:
                game_restart()
        shield_checker()

    
    def normal_march():
        move_mouse(952, 784)
        py.click(952, 784)
        time.sleep(delay_1)
        move_mouse(553, 130)
        py.click(553, 130)
        time.sleep(delay_2)
        py.click(1357, 990)

    
    def shield_1920():
        py.press('w')
        time.sleep(0.2)
        pos = imagesearch_numLoop_self(resource_path(dir + 'shield.png'), 11, 0.65, (32, 236, 70, 53), **('precision', 'reg'))
        if pos == None:
            py.click(705, 367)
        else:
            py.click(pos[0], pos[1])
        pos = imagesearch_numLoop_self(resource_path(dir + 'eight_hr_shield.png'), 15, 0.65, (650, 216, 38, 35), **('precision', 'reg'))
        use = py.locateOnScreen(resource_path(dir + 'use.png'), 0.7, (935, 575, 54, 59), **('confidence', 'region'))
        aman = 'p'
        if use != None:
            py.click(1038, 607)
            aman = 'u'
        else:
            py.click(1225, 615)
            aman = 'g'
        time.sleep(3)

    
    def shield_checker():
        ss = py.locateOnScreen(resource_path(dir + 'shield_img.png'), 0.7, (1814, 358, 85, 80), **('confidence', 'region'))
        if ss == None:
            shield_1920()
            py.click('right', 1, **('button', 'clicks'))
            return None

    
    def image_after_clicking():
        dir = 'img_1920/'
        s = py.locateOnScreen(resource_path(dir + 'unoccupied.png'), 0.85, (851, 362, 198, 60), **('confidence', 'region'))
        if s == None:
            return False
        if None == 1:
            s = py.locateOnScreen(resource_path(dir + 'lvl_11.png'), 0.8, (970, 230, 165, 105), **('confidence', 'region'))
            if s != None:
                return True
            if None == 1:
                s = py.locateOnScreen(resource_path(dir + 'lvl_10.png'), 0.8, (970, 240, 165, 105), **('confidence', 'region'))
                if s != None:
                    return True
                if None == 1:
                    s = py.locateOnScreen(resource_path(dir + 'lvl_9.png'), 0.8, (970, 245, 165, 105), **('confidence', 'region'))
                    if s != None:
                        return True
                    if None == 1:
                        s = py.locateOnScreen(resource_path(dir + 'lvl_8.png'), 0.8, (970, 240, 165, 105), **('confidence', 'region'))
                        if s != None:
                            return True
                        if None == 1:
                            s = py.locateOnScreen(resource_path(dir + 'lvl_7.png'), 0.8, (970, 240, 165, 105), **('confidence', 'region'))
                            if s != None:
                                return True
                            if None == 1:
                                s = py.locateOnScreen(resource_path(dir + 'lvl_6.png'), 0.8, (970, 240, 165, 105), **('confidence', 'region'))
                                if s != None:
                                    return True
                                if None == 1:
                                    s = py.locateOnScreen(resource_path(dir + 'lvl_5.png'), 0.8, (970, 240, 165, 105), **('confidence', 'region'))
                                    if s != None:
                                        return True
                                    if None == 1:
                                        s = py.locateOnScreen(resource_path(dir + 'lvl_4.png'), 0.8, (970, 240, 165, 105), **('confidence', 'region'))
                                        if s != None:
                                            return True
                                        if None == 1:
                                            s = py.locateOnScreen(resource_path(dir + 'lvl_3.png'), 0.8, (970, 240, 165, 105), **('confidence', 'region'))
                                            if s != None:
                                                return True
                                            if None == 1:
                                                s = py.locateOnScreen(resource_path(dir + 'lvl_2.png'), 0.8, (970, 240, 165, 105), **('confidence', 'region'))
                                                if s != None:
                                                    return True
                                                if None == 1:
                                                    s = py.locateOnScreen(resource_path(dir + 'lvl_1.png'), 0.8, (970, 240, 165, 105), **('confidence', 'region'))
                                                    if s != None:
                                                        return True
                                                    return None

    
    def swift_attack():
        if march_type == 0:
            move_mouse(1221, 783)
            py.click(1221, 783)
            return None
        None()

    
    def march_checker_2(n = None):
        side_icon()
        curr_time = time.time()
        if curr_time - start_time > samay or cmd_number[1] == 0:
            return True
        march = None.locateOnScreen(resource_path('img_1920/march_' + str(n) + '.png'), 0.9, (199, 249, 65, 37), **('confidence', 'region'))
        if march != None:
            return True

    
    def march_checker(n):
        march = py.locateOnScreen(resource_path('img_1920/march_' + str(n) + '.png'), 0.9, (199, 249, 65, 37), **('confidence', 'region'))
        if march != None:
            return True

    
    def side_icon():
        side = py.locateOnScreen(resource_path('img_1920/side_icon.png'), 0.8, (49, 243, 67, 46), **('confidence', 'region'))
        if side == None:
            move_mouse(47, 415)
            py.click(47, 415)
            time.sleep(tweaker * 0.1)
            return None

    
    def wait():
        check_for_disturbance_global()
        curr_time = time.time()
        if curr_time - start_time > samay or cmd_number[1] == 0:
            cmd_number[1] = 0
            return True
        s = None(marches)
        if s:
            curr_time = time.time()
            if curr_time - start_time > samay or cmd_number[1] == 0:
                cmd_number[1] = 0
                return True
            None()
            s = march_checker_2(marches)
            if not s:
                return None
            return None

    
    def one_screen_food():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1920/food1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((100, 100, 1700, 263), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 100)
            py.click(loc[0] + 100, loc[1] + 100)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img2 = cv.imread(resource_path('img_1920/food2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((100, 353, 1700, 263), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 353)
            py.click(loc[0] + 100, loc[1] + 353)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img3 = cv.imread(resource_path('img_1920/food3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((100, 616, 1700, 253), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 616)
            py.click(loc[0] + 100, loc[1] + 616)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()

    
    def one_screen_wood():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1920/wood1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((100, 100, 1700, 263), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 100)
            py.click(loc[0] + 100, loc[1] + 100)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img2 = cv.imread(resource_path('img_1920/wood2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((100, 353, 1700, 263), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 353)
            py.click(loc[0] + 100, loc[1] + 353)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img3 = cv.imread(resource_path('img_1920/wood3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((100, 616, 1700, 253), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100 - 10, loc[1] + 616)
            py.click(loc[0] + 100 - 10, loc[1] + 616)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()

    
    def one_screen_iron():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1920/iron1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((100, 100, 1700, 263), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 100)
            py.click(loc[0] + 100, loc[1] + 100)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img2 = cv.imread(resource_path('img_1920/iron2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((100, 353, 1700, 263), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 353)
            py.click(loc[0] + 100, loc[1] + 353)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img3 = cv.imread(resource_path('img_1920/iron3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((100, 616, 1700, 253), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100 - 10, loc[1] + 353)
            py.click(loc[0] + 100 - 10, loc[1] + 616)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()

    
    def one_screen_stone():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1920/stone1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((100, 100, 1700, 263), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 100)
            py.click(loc[0] + 100, loc[1] + 100)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img2 = cv.imread(resource_path('img_1920/stone2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((100, 353, 1700, 263), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 353)
            py.click(loc[0] + 100, loc[1] + 353)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img3 = cv.imread(resource_path('img_1920/stone3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((100, 616, 1700, 253), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100 - 10, loc[1] + 616)
            py.click(loc[0] + 100 - 10, loc[1] + 616)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()

    
    def one_screen_silver():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1920/silver1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((100, 100, 1700, 263), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 100)
            py.click(loc[0] + 100, loc[1] + 100)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img2 = cv.imread(resource_path('img_1920/silver2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((100, 353, 1700, 263), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 353)
            py.click(loc[0] + 100, loc[1] + 353)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img3 = cv.imread(resource_path('img_1920/silver3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((100, 616, 1700, 253), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100 - 10, loc[1] + 616)
            py.click(loc[0] + 100 - 10, loc[1] + 616)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()

    
    def badha():
        wood_screen = py.locateOnScreen(resource_path(dir + 'wood_screen.png'), (0, 13, 60, 60), 0.75, **('region', 'confidence'))
        if wood_screen != None:
            py.click('right', 1, **('button', 'clicks'))
            time.sleep(0.2)
        food_check = py.locateOnScreen(resource_path(dir + 'food_check2.png'), (1852, 46, 54, 54), 0.55, **('region', 'confidence'))
        if food_check != None:
            click(55, 978)
            time.sleep(0.6)
        ok = pyautogui.locateOnScreen(resource_path(dir + 'ok.png'), 0.65, **('confidence',))
        if ok != None:
            time.sleep(0.25)
            
            try:
                ok = pyautogui.center(ok)
                click(ok[0], ok[1])
            finally:
                pass
            print('ok missed')
            cross = py.locateOnScreen(resource_path(dir + 'cross.png'), 0.75, **('confidence',))
            if cross != None:
                
                try:
                    cross = py.center(cross)
                    time.sleep(0.1)
                    click(cross[0], cross[1])
                finally:
                    pass
                print('cross missed')
                cross2 = py.locateOnScreen(resource_path(dir + 'cross2.png'), 0.75, **('confidence',))
                if cross2 != None:
                    
                    try:
                        cross2 = py.center(cross)
                        time.sleep(0.1)
                        click(cross[0], cross[1])
                    finally:
                        pass
                    print('Cross2 missed')
                    if crash_value == 'On' or crash_value == 'on':
                        game_value = Game_Running()
                        if game_value == False:
                            game_restart()



        continue_lady = py.locateOnScreen(resource_path(dir + 'continue_lady.png'), 0.75, **('confidence',))
        if continue_lady != None:
            click(956, 790)
            time.sleep(0.2)
        rate_us = py.locateOnScreen(resource_path(dir + 'rate_us.png'), 0.75, **('confidence',))
        if rate_us != None:
            click(956, 790)
            time.sleep(0.2)
            return None

    
    def game_opener():
        retry_check = py.locateOnScreen(resource_path(dir + 'retry.png'), (858, 678, 192, 66), 0.8, **('region', 'confidence'))
        if retry_check != None:
            retry_check = py.center(retry_check)
            py.click(retry_check[0], retry_check[1])
            time.sleep(0.25)
        ss = py.locateOnScreen(resource_path(dir + 'loading_screen.png'), 0.6, **('confidence',))
        if ss == None:
            return 'khul_gaya'
        None.sleep(1)
        continue

    
    def retry_checker():
        retry_check = py.locateOnScreen(resource_path(dir + 'retry.png'), (858, 678, 192, 66), 0.8, **('region', 'confidence'))
        if retry_check != None:
            task_kill = 'TASKKILL /F /IM ' + Game_Name
            os.system(task_kill)
            game_restart()
            return None

    
    def game_restart():
        time.sleep(1)
        os.system('start explorer shell:appsFolder\\A278AB0D.MarchofEmpires_h6adky7gbf63m!App')
        time.sleep(4 + wait_val)
        game_opener()
        time.sleep(wait_val)
        clear_starting_screens

    
    def clear_starting_screens():
        time.sleep(0.1)
        world = py.locateOnScreen(resource_path(dir + 'world.png'), (1804, 11, 100, 85), 0.6, **('region', 'confidence'))
        if world != None:
            time.sleep(2)
            world = py.locateOnScreen(resource_path(dir + 'world.png'), (1804, 11, 100, 85), 0.6, **('region', 'confidence'))
            if world != None:
                return None
        badha()
        continue

    
    def one_screen_gold():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path(dir + 'gold1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((100, 100, 1700, 263), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 100)
            py.click(loc[0] + 100, loc[1] + 100)
            time.sleep(1)
            img_after_click = imagesearch_numLoop_self(resource_path(dir + 'screen_after_click.png'), 1, 0.9, (847, 703, 221, 73), **('precision', 'reg'))
            if img_after_click != None:
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img2 = cv.imread(resource_path(dir + 'gold2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((100, 353, 1700, 263), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100, loc[1] + 353)
            py.click(loc[0] + 100, loc[1] + 353)
            time.sleep(1)
            img_after_click = imagesearch_numLoop_self(resource_path(dir + 'screen_after_click.png'), 1, 0.9, (847, 703, 221, 73), **('precision', 'reg'))
            if img_after_click != None:
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()
        needle_img3 = cv.imread(resource_path(dir + 'gold3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((100, 616, 1700, 253), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 100 - 10, loc[1] + 616)
            py.click(loc[0] + 100 - 10, loc[1] + 616)
            time.sleep(1)
            img_after_click = imagesearch_numLoop_self(resource_path(dir + 'screen_after_click.png'), 1, 0.9, (847, 703, 221, 73), **('precision', 'reg'))
            if img_after_click != None:
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance_global()

    if b_method == 1:
        
        def location_opener(cord):
            x = str(cord[0])
            y = str(cord[1])
            x = list(x)
            y = list(y)
            time.sleep(0.2)
            move_mouse(781, 42)
            py.click(781, 42)
            time.sleep(tweaker * 0.1 + 0.35)
            for i in x:
                py.press(i)
                time.sleep(w_interval)
            time.sleep(0.35)
            move_mouse(1037, 173)
            py.click(1037, 173)
            time.sleep(tweaker * 0.1 + 0.35)
            for i in y:
                py.press(i)
                time.sleep(w_interval)
            time.sleep(tweaker * 0.1 + 0.35)
            move_mouse(1130, 186)
            if location_opener_stuck == '1':
                click(1220, 174)
                time.sleep(tweaker * 0.1 + 0.2)
            py.click(1130, 186)

    elif b_method == 2:
        
        def location_opener(cord):
            x = cord[0]
            y = cord[1]
            time.sleep(0.2)
            move_mouse(781, 42)
            py.click(781, 42)
            time.sleep(tweaker * 0.1 + 0.35)
            keyboard.write(str(x))
            time.sleep(tweaker * 0.1 + 0.35)
            move_mouse(1037, 173)
            py.click(1037, 173)
            time.sleep(tweaker * 0.1 + 0.35)
            keyboard.write(str(y))
            time.sleep(tweaker * 0.1 + 0.35)
            move_mouse(1130, 186)
            if location_opener_stuck == '1':
                click(1220, 174)
                time.sleep(tweaker * 0.1 + 0.2)
            py.click(1130, 186)

    elif b_method == 3:
        
        def location_opener(cord):
            x = cord[0]
            y = cord[1]
            time.sleep(0.2)
            move_mouse(781, 42)
            py.click(781, 42)
            time.sleep(tweaker * 0.1 + 0.35)
            py.write(str(x), w_interval, **('interval',))
            time.sleep(tweaker * 0.1 + 0.35)
            move_mouse(1037, 173)
            py.click(1037, 173)
            time.sleep(tweaker * 0.1 + 0.35)
            py.write(str(y), w_interval, **('interval',))
            time.sleep(tweaker * 0.1 + 0.35)
            move_mouse(1130, 186)
            if location_opener_stuck == '1':
                click(1220, 174)
                time.sleep(tweaker * 0.1 + 0.2)
            py.click(1130, 186)

    Workbook = Workbook
    load_workbook = load_workbook
    import openpyxl
    wb = load_workbook('regions.xlsx')
    ws = wb.active
    n_regions = int(ws['B3'].value)
    region_Arr = []
    for i in range(n_regions):
        x = ws['B' + str(5 + i)].value
        y = ws['C' + str(5 + i)].value
        region_Arr.append((x, y))
    f = open('wait_span.txt', 'r')
    content = f.read()
    f.close()
    wait_span = float(content)
    time.sleep(0.15)
    if cmd_number[2] == 1:
        cmd_number[2] = 0
        clear_starting_screens()
        time.sleep(0.2)
        badha()
    if keyboard.is_pressed('s'):
        cmd_number[0] = 1
        cmd_number[1] = 1
    if cmd_number[1] == 1 and cmd_number[0] == 1 and server_arr[0] == 1:
        start_time = time.time()
        check_for_disturbance_global()
        last_restart_time = time.time()
        curr_time = time.time()
        if curr_time - start_time > samay or cmd_number[1] == 0:
            cmd_number[1] = 0
        else:
            for i in range(n_regions):
                curr_time = time.time()
                if curr_time - start_time > samay and cmd_number[1] == 0 or server_arr[0] == 0:
                    cmd_number[1] = 0
                else:
                    wait()
                    location_opener(region_Arr[i])
                    time.sleep(wait_span + tweaker * 0.1)
                    if food == 1 or all_tile == 1:
                        one_screen_food()
                    if wood == 1 or all_tile == 1:
                        one_screen_wood()
                    if iron == 1 or all_tile == 1:
                        one_screen_iron()
                    if stone == 1 or all_tile == 1:
                        one_screen_stone()
                    if silver == 1 or all_tile == 1:
                        one_screen_silver()
                    if gold == 1:
                        one_screen_gold()


def windows_1366(cmd_number, settings, server_arr, discord_key_arr):
    dir = 'img_1366/'
    time.sleep(1)
    if server_arr[0] == -1:
        return None
    if None[0] == 1:
        display_pannel()
    
    
    def normal_march():
        move_mouse(677, 557)
        py.click(677, 557)
        time.sleep(delay_1)
        move_mouse(388, 92)
        py.click(388, 92)
        time.sleep(delay_2)
        py.click(940, 694)

    
    def shield_1366():
        py.press('w')
        time.sleep(0.2)
        pos = imagesearch_numLoop_self(resource_path(dir + 'shield.png'), 11, 0.65, (42, 165, 31, 35), **('precision', 'reg'))
        if pos == None:
            py.click(249, 198)
        else:
            click(pos[0], pos[1])
        pos = imagesearch_numLoop_self(resource_path(dir + 'eight_hr_shield.png'), 15, 0.65, (467, 149, 22, 30), **('precision', 'reg'))
        use = py.locateOnScreen(resource_path(dir + 'use.png'), 0.7, (658, 412, 44, 34), **('confidence', 'region'))
        aman = 'p'
        if use != None:
            aman = 'u'
            py.click(738, 433)
        else:
            aman = 'g'
            py.click(880, 433)
        time.sleep(3)

    
    def shield_checker():
        ss = py.locateOnScreen(resource_path(dir + 'shield_img.png'), 0.7, (1289, 255, 68, 50), **('confidence', 'region'))
        if ss == None:
            shield_1366()
            py.click('right', 1, **('button', 'clicks'))
            return None

    
    def image_after_clicking():
        dir = 'img_1366/'
        s = py.locateOnScreen(resource_path(dir + 'unoccupied.png'), 0.85, (605, 257, 140, 42), **('confidence', 'region'))
        if s == None:
            return False
        if None == 1:
            s = py.locateOnScreen(resource_path(dir + 'lvl_11.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
            if s != None:
                return True
            if None == 1:
                s = py.locateOnScreen(resource_path(dir + 'lvl_10.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                if s != None:
                    return True
                if None == 1:
                    s = py.locateOnScreen(resource_path(dir + 'lvl_9.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                    if s != None:
                        return True
                    if None == 1:
                        s = py.locateOnScreen(resource_path(dir + 'lvl_8.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                        if s != None:
                            return True
                        if None == 1:
                            s = py.locateOnScreen(resource_path(dir + 'lvl_7.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                            if s != None:
                                return True
                            if None == 1:
                                s = py.locateOnScreen(resource_path(dir + 'lvl_6.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                                if s != None:
                                    return True
                                if None == 1:
                                    s = py.locateOnScreen(resource_path(dir + 'lvl_5.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                                    if s != None:
                                        return True
                                    if None == 1:
                                        s = py.locateOnScreen(resource_path(dir + 'lvl_4.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                                        if s != None:
                                            return True
                                        if None == 1:
                                            s = py.locateOnScreen(resource_path(dir + 'lvl_3.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                                            if s != None:
                                                return True
                                            if None == 1:
                                                s = py.locateOnScreen(resource_path(dir + 'lvl_2.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                                                if s != None:
                                                    return True
                                                if None == 1:
                                                    s = py.locateOnScreen(resource_path(dir + 'lvl_1.png'), 0.8, (690, 163, 117, 74), **('confidence', 'region'))
                                                    if s != None:
                                                        return True
                                                    return None

    
    def swift_attack():
        if march_type == 0:
            move_mouse(864, 552)
            py.click(864, 552)
            return None
        None()

    
    def march_checker_2(n = None):
        side_icon()
        curr_time = time.time()
        if curr_time - start_time > samay or cmd_number[1] == 0:
            return True
        march = None.locateOnScreen(resource_path('img_1366/march_' + str(n) + '.png'), 0.9, (141, 177, 46, 26), **('confidence', 'region'))
        if march != None:
            return True

    
    def march_checker(n = None):
        curr_time = time.time()
        if curr_time - start_time > samay or cmd_number[1] == 0:
            return True
        march = None.locateOnScreen(resource_path('img_1366/march_' + str(n) + '.png'), 0.9, (141, 177, 46, 26), **('confidence', 'region'))
        if march != None:
            return True

    
    def side_icon():
        side = py.locateOnScreen(resource_path('img_1366/side_icon.png'), 0.8, (34, 172, 47, 32), **('confidence', 'region'))
        if side == None:
            move_mouse(33, 295)
            py.click(33, 295)
            time.sleep(tweaker * 0.1)
            return None

    
    def wait():
        curr_time = time.time()
        if curr_time - start_time > samay or cmd_number[1] == 0:
            return True
        None()
        side_icon()
        s = march_checker(marches)
        if s:
            curr_time = time.time()
            if curr_time - start_time > samay or cmd_number[1] == 0:
                return True
            None()
            side_icon()
            s = march_checker(marches)
            if not s:
                return None
            return None

    
    def one_screen_food():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1366/food1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((71, 71, 1209, 187), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 71)
            py.click(loc[0] + 71, loc[1] + 71)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img2 = cv.imread(resource_path('img_1366/food2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((71, 251, 1209, 187), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 251)
            py.click(loc[0] + 71, loc[1] + 251)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img3 = cv.imread(resource_path('img_1366/food3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((71, 438, 1209, 179), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 438)
            py.click(loc[0] + 71, loc[1] + 438)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()

    
    def one_screen_wood():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1366/wood1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((71, 71, 1209, 187), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 71)
            py.click(loc[0] + 71, loc[1] + 71)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img2 = cv.imread(resource_path('img_1366/wood2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((71, 251, 1209, 187), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 251)
            py.click(loc[0] + 71, loc[1] + 251)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img3 = cv.imread(resource_path('img_1366/wood3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((71, 438, 1209, 179), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 438)
            py.click(loc[0] + 71, loc[1] + 438)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()

    
    def one_screen_stone():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1366/stone1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((71, 71, 1209, 187), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 71)
            py.click(loc[0] + 71, loc[1] + 71)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img2 = cv.imread(resource_path('img_1366/stone2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((71, 251, 1209, 187), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 251)
            py.click(loc[0] + 71, loc[1] + 251)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img3 = cv.imread(resource_path('img_1366/stone3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((71, 438, 1209, 179), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 438)
            py.click(loc[0] + 71, loc[1] + 438)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()

    
    def one_screen_iron():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1366/iron1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((71, 71, 1209, 187), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 71)
            py.click(loc[0] + 71, loc[1] + 71)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img2 = cv.imread(resource_path('img_1366/iron2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((71, 251, 1209, 187), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 251)
            py.click(loc[0] + 71, loc[1] + 251)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img3 = cv.imread(resource_path('img_1366/iron3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((71, 438, 1209, 179), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 438)
            py.click(loc[0] + 71, loc[1] + 438)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()

    
    def one_screen_silver():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1366/silver1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((71, 71, 1209, 187), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 71)
            py.click(loc[0] + 71, loc[1] + 71)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img2 = cv.imread(resource_path('img_1366/silver2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((71, 251, 1209, 187), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 251)
            py.click(loc[0] + 71, loc[1] + 251)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img3 = cv.imread(resource_path('img_1366/silver3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((71, 438, 1209, 179), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 438)
            py.click(loc[0] + 71, loc[1] + 438)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()

    
    def one_screen_gold():
        checker = False
        flag = False
        threshold2 = accuracy
        eps = 1
        needle_img1 = cv.imread(resource_path('img_1366/gold1.png'), cv.IMREAD_UNCHANGED)
        needle_img1 = cv.cvtColor(np.array(needle_img1), cv.COLOR_RGB2GRAY)
        haystack_img1 = py.screenshot((71, 71, 1209, 187), **('region',))
        haystack_img1 = cv.cvtColor(np.array(haystack_img1), cv.COLOR_RGB2GRAY)
        points1 = findClickPositions(needle_img1, haystack_img1, threshold2, eps)
        for loc in points1:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 71)
            py.click(loc[0] + 71, loc[1] + 71)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img2 = cv.imread(resource_path('img_1366/gold2.png'), cv.IMREAD_UNCHANGED)
        needle_img2 = cv.cvtColor(np.array(needle_img2), cv.COLOR_RGB2GRAY)
        haystack_img2 = py.screenshot((71, 251, 1209, 187), **('region',))
        haystack_img2 = cv.cvtColor(np.array(haystack_img2), cv.COLOR_RGB2GRAY)
        points2 = findClickPositions(needle_img2, haystack_img2, threshold2, eps)
        for loc in points2:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 251)
            py.click(loc[0] + 71, loc[1] + 251)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()
        needle_img3 = cv.imread(resource_path('img_1366/gold3.png'), cv.IMREAD_UNCHANGED)
        needle_img3 = cv.cvtColor(np.array(needle_img3), cv.COLOR_RGB2GRAY)
        haystack_img3 = py.screenshot((71, 438, 1209, 179), **('region',))
        haystack_img3 = cv.cvtColor(np.array(haystack_img3), cv.COLOR_RGB2GRAY)
        points3 = findClickPositions(needle_img3, haystack_img3, threshold2, eps)
        for loc in points3:
            if march_checker_2(marches) and wait():
                return None
            None(loc[0] + 71, loc[1] + 438)
            py.click(loc[0] + 71, loc[1] + 438)
            time.sleep(1)
            if image_after_clicking():
                time.sleep(tweaker * 0.1)
                swift_attack()
                time.sleep(0.1)
            else:
                pyautogui.click('right', 1, **('button', 'clicks'))
            check_for_disturbance()

    
    def badha():
        wood_screen = py.locateOnScreen(resource_path(dir + 'wood_screen.png'), (0, 9, 42, 42), 0.75, **('region', 'confidence'))
        if wood_screen != None:
            pyautogui.click('right', 1, **('button', 'clicks'))
            time.sleep(0.2)
        food_check = py.locateOnScreen(resource_path(dir + 'food_check2.png'), (1317, 32, 38, 38), 0.55, **('region', 'confidence'))
        if food_check != None:
            py.click(39, 695)
            time.sleep(0.6)
        ok = pyautogui.locateOnScreen(resource_path(dir + 'ok.png'), (606, 454, 133, 46), 0.65, **('region', 'confidence'))
        if ok != None:
            time.sleep(0.25)
            
            try:
                ok = pyautogui.center(ok)
                click(ok[0], ok[1])
            finally:
                pass
            print('ok missed')
            cross = py.locateOnScreen(resource_path(dir + 'cross.png'), 0.75, **('confidence',))
            if cross != None:
                
                try:
                    cross = py.center(cross)
                    time.sleep(0.1)
                    click(cross[0], cross[1])
                finally:
                    pass
                print('cross missed')
                rate_us = py.locateOnScreen(resource_path(dir + 'rate_us.png'), 0.75, **('confidence',))
                if rate_us != None:
                    py.click(956, 790)
                    time.sleep(0.2)
                    return None
                return None



    
    def game_opener():
        retry_check = py.locateOnScreen(resource_path(dir + 'retry.png'), (609, 483, 129, 37), 0.8, **('region', 'confidence'))
        if retry_check != None:
            retry_check = py.center(retry_check)
            py.click(retry_check[0], retry_check[1])
            time.sleep(0.25)
        ss = py.locateOnScreen(resource_path(dir + 'loading_screen.png'), 0.6, **('confidence',))
        if ss == None:
            return 'khul_gaya'
        None.sleep(1)
        continue

    
    def clear_starting_screens():
        time.sleep(0.1)
        world = py.locateOnScreen(resource_path(dir + 'world.png'), (1278, 6, 71, 51), 0.6, **('region', 'confidence'))
        if world != None:
            time.sleep(2)
            world = py.locateOnScreen(resource_path(dir + 'world.png'), (1278, 6, 71, 51), 0.6, **('region', 'confidence'))
            if world != None:
                return None
        badha()
        continue

    
    def game_restart():
        time.sleep(1)
        os.system('start explorer shell:appsFolder\\A278AB0D.MarchofEmpires_h6adky7gbf63m!App')
        time.sleep(5 + wait_val)
        game_opener()
        time.sleep(wait_val)
        badha()
        badha()

    
    def retry_checker():
        retry_check = py.locateOnScreen(resource_path(dir + 'retry.png'), (609, 483, 129, 37), 0.8, **('region', 'confidence'))
        if retry_check != None:
            print('came')
            task_kill = 'TASKKILL /F /IM ' + Game_Name
            os.system(task_kill)
            game_restart()
            return None

    
    def check_for_disturbance():
        dir = ''
        wood_screen = py.locateOnScreen(resource_path(dir + 'img_1366/wood_screen.png'), (0, 9, 42, 42), 0.75, **('region', 'confidence'))
        if wood_screen != None:
            pyautogui.click('right', 1, **('button', 'clicks'))
            time.sleep(0.2)
        food_check = py.locateOnScreen(resource_path(dir + 'img_1366/food_check2.png'), (1317, 32, 38, 38), 0.55, **('region', 'confidence'))
        if food_check != None:
            py.click(55, 978)
            time.sleep(0.6)
        ok = pyautogui.locateOnScreen(resource_path(dir + 'img_1366/ok.png'), (606, 454, 133, 46), 0.65, **('region', 'confidence'))
        if ok != None:
            time.sleep(0.25)
            ok = pyautogui.center(ok)
            py.click(ok[0], ok[1])
        search_b = py.locateOnScreen(resource_path('img_1366/search_bar.png'), (778, 95, 69, 54), **('region',))
        if search_b != None:
            py.click('right', 1, **('button', 'clicks'))
        if crash_value == 'On' or crash_value == 'on':
            game_value = Game_Running()
            if game_value == False:
                game_restart()
        shield_checker()

    if b_method == 1:
        
        def location_opener(cord):
            x = str(cord[0])
            y = str(cord[1])
            x = list(x)
            y = list(y)
            time.sleep(0.2)
            move_mouse(555, 29)
            py.click(555, 29)
            time.sleep(tweaker * 0.1 + 0.35)
            for i in x:
                py.press(i)
                time.sleep(w_interval)
            time.sleep(tweaker * 0.1 + 0.35)
            move_mouse(719, 132)
            py.click(719, 132)
            time.sleep(tweaker * 0.1 + 0.35)
            for i in y:
                py.press(i)
                time.sleep(w_interval)
            time.sleep(tweaker * 0.1 + 0.35)
            if double_check == 'on':
                move_mouse(889, 123)
                py.click(889, 123)
                time.sleep(wait_click)
            move_mouse(803, 132)
            py.click(803, 132)

    elif b_method == 2:
        
        def location_opener(cord):
            x = cord[0]
            y = cord[1]
            time.sleep(0.2)
            move_mouse(555, 29)
            py.click(555, 29)
            time.sleep(tweaker * 0.1 + 0.35)
            keyboard.write(str(x))
            time.sleep(tweaker * 0.1 + 0.35)
            move_mouse(719, 132)
            click(719, 132)
            time.sleep(tweaker * 0.1 + 0.35)
            keyboard.write(str(y))
            time.sleep(tweaker * 0.1 + 0.35)
            if double_check == 'on':
                move_mouse(889, 123)
                py.click(889, 123)
                time.sleep(wait_click)
            move_mouse(803, 132)
            py.click(803, 132)

    elif b_method == 3:
        
        def location_opener(cord):
            x = cord[0]
            y = cord[1]
            time.sleep(0.2)
            move_mouse(555, 29)
            py.click(555, 29)
            time.sleep(tweaker * 0.1 + 0.35)
            py.write(str(x), w_interval, **('interval',))
            time.sleep(tweaker * 0.1 + 0.35)
            move_mouse(719, 132)
            click(719, 132)
            time.sleep(tweaker * 0.1 + 0.35)
            py.write(str(y), w_interval, **('interval',))
            time.sleep(tweaker * 0.1 + 0.35)
            if double_check == 'on':
                move_mouse(889, 123)
                py.click(889, 123)
                time.sleep(wait_click)
            move_mouse(803, 132)
            py.click(803, 132)

    Workbook = Workbook
    load_workbook = load_workbook
    import openpyxl
    wb = load_workbook('regions.xlsx')
    ws = wb.active
    n_regions = int(ws['B3'].value)
    region_Arr = []
    for i in range(n_regions):
        x = ws['B' + str(5 + i)].value
        y = ws['C' + str(5 + i)].value
        region_Arr.append((x, y))
    f = open('wait_span.txt', 'r')
    content = f.read()
    f.close()
    wait_span = float(content)
    time.sleep(0.15)
    if cmd_number[2] == 1:
        cmd_number[2] = 0
        clear_starting_screens()
        time.sleep(0.2)
        badha()
    if keyboard.is_pressed('s'):
        cmd_number[0] = 1
        cmd_number[1] = 1
    if cmd_number[1] == 1 and cmd_number[0] == 1 and server_arr[0] == 1:
        start_time = time.time()
        check_for_disturbance()
        last_restart_time = time.time()
        curr_time = time.time()
        if curr_time - start_time > samay and cmd_number[1] == 0 or server_arr[0] == 0:
            pass
        else:
            for i in range(n_regions):
                curr_time = time.time()
                if curr_time - start_time > samay or cmd_number[1] == 0:
                    pass
                elif curr_time - last_restart_time > restart_time:
                    time.sleep(0.1)
                    task_kill = 'TASKKILL /F /IM ' + Game_Name
                    os.system(task_kill)
                    time.sleep(wait_val + 4)
                    game_restart()
                    last_restart_time = time.time()
                wait()
                location_opener(region_Arr[i])
                time.sleep(wait_span + tweaker * 0.1)
                if food == 1 or all_tile == 1:
                    one_screen_food()
                if wood == 1 or all_tile == 1:
                    one_screen_wood()
                if iron == 1 or all_tile == 1:
                    one_screen_iron()
                if stone == 1 or all_tile == 1:
                    one_screen_stone()
                if silver == 1 or all_tile == 1:
                    one_screen_silver()
                if gold == 1:
                    one_screen_gold()
    continue


def new_update_downloader(name, address):
    import gdown
    
    def killer():
        top.destroy()

    dir_loc = ''
    curr_directory = os.getcwd()
    curr_directory = curr_directory.split('\\')
    rasta = ''
    for i in range(len(curr_directory) - 1):
        rasta += curr_directory[i] + '//'
    dir_loc = rasta
    rasta += name
    url = 'https://drive.google.com/uc?id=' + address
    output = rasta + '.zip'
    gdown.download(url, output, False, **('quiet',))
    top = Tk()
    top.iconbitmap(resource_path('bot.ico'))
    top.title('Confirmation')
    label = Label(top, 'Successfully Downloaded At :  ' + rasta, '#990000', 'white', 30, 20, **('text', 'fg', 'bg', 'pady', 'padx')).grid(0, 0, **('row', 'column'))
    button = Button(top, 'OK', killer, '#990000', 'white', 70, **('text', 'command', 'fg', 'bg', 'padx')).grid(1, 0, **('row', 'column'))
    top.mainloop()
    with zipfile.ZipFile(output, 'r') as zip_ref:
        zip_ref.extractall(dir_loc)
        None(None, None, None)
# WARNING: Decompyle incomplete


def pop_up_update(n, name, location_, bot_version):
    r_val = 0
    root = Tk()
    root.title('Update')
    root.iconbitmap(resource_path('bot.ico'))
    label = Label(root, 'Dear User, New Version of bot is available for download.', '#990000', 'white', 30, 20, **('text', 'fg', 'bg', 'pady', 'padx')).grid(1, 0, **('row', 'column'))
    if n == 1:
        title_box = 'Update'
        a = bot_version.split('.')
        bot_version = str(int(a[0])) + '.' + str(int(a[1]) + 1)
        box_text = 'v' + bot_version + ' is available for download. Download Now ?'
        response = messagebox.askyesno(title_box, box_text)
        r_val = response
        if response == 1:
            root.destroy()
        else:
            root.destroy()
    else:
        title_box = 'Manadatory Update'
        box_text = 'This Version Is No Longger Supported. Download The Latest Version Now ?'
        response = messagebox.askyesno(title_box, box_text)
        r_val = response
        if response == 1:
            root.destroy()
        else:
            root.destroy()
    root.mainloop()
    return r_val


def Invalide_User():
    root = Tk()
    root.title('Alert')
    root.iconbitmap(resource_path('bot.ico'))
    message_frame = LabelFrame(root, 'Levi Bots', '#990000', 20, 20, **('text', 'fg', 'padx', 'pady'))
    label1 = Label(root, 'Hi, You are Not Authorised To The Use Of Levi Bots', '#990000', 20, 20, **('text', 'fg', 'padx', 'pady')).grid(0, 0, **('row', 'column'))
    label2 = Label(message_frame, 'Please Contact At Information Shown Below : ', '#990000', 20, **('text', 'fg', 'padx')).grid(1, 0, **('row', 'column'))
    label3 = Label(message_frame, 'Line : botsmoe ', '#990000', 20, **('text', 'fg', 'padx')).grid(2, 0, **('row', 'column'))
    label4 = Label(message_frame, 'Discord : LEVI#1709     (All Capital: L E V I)', '#990000', 20, **('text', 'fg', 'padx')).grid(3, 0, **('row', 'column'))
    label5 = Label(message_frame, 'Gmail : automationexperts.org@gmail.com', '#990000', 20, **('text', 'fg', 'padx')).grid(4, 0, **('row', 'column'))
    response = messagebox.showinfo('Alert', 'Please Contact At Information Shown Below. \n Line : botsmoe .\n Discord : LEVI#1709. \n Gmail : automationexperts.org@gmail.com')
    message_frame.grid(1, 0, **('row', 'column'))
    root.mainloop()


def user_expired():
    root = Tk()
    root.title('Expired')
    root.iconbitmap(resource_path('bot.ico'))
    label = Label(root, 'Dear User Your Bot Has Expired . Please Recharge To Continue The Use. Thank You.', '#990000', 'white', 30, 20, **('text', 'fg', 'bg', 'pady', 'padx')).pack()
    root.mainloop()


def pop_up_handler(msg):
    root = Tk()
    root.title('INFO')
    root.iconbitmap(resource_path('bot.ico'))
    root.withdraw()
    messagebox.showinfo('Message From Levi : ', msg)
    root.destroy()
    root.mainloop()


def server_communication(server_arr, discord_key_arr):
    SERVER = '3.73.231.132'
    PORT = 80
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((SERVER, PORT))
    game = 'moe'
    bot_type = 'gather'
    auth_key = subprocess.check_output('wmic csproduct get uuid').decode().split('\n')[1].strip()
    bot_version = '3.2'
    d_d = ''
    result_w_g = ''
    
    try:
        key_w_g = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SOFTWARE\\Microsoft\\Cryptography', 0, winreg.KEY_READ | winreg.KEY_WOW64_64KEY)
        result_w_g = winreg.QueryValueEx(key_w_g, 'MachineGuid')
        result_w_g = result_w_g[0]
    finally:
        pass
    result_w_g = 'notfound'
    
    try:
        d_d = subprocess.check_output('wmic DISKDRIVE get SerialNumber').decode().split('\n')[1].strip()
    finally:
        pass
    d_d = 'notfound'
    Handshake_info = game + '/r' + bot_type + '/r' + auth_key + '/r' + bot_version + '/r' + d_d + '/r' + result_w_g
    client.send(Handshake_info.encode('utf-8'))
    print('Game : ', game)
    print('Bot  : ', bot_type)
    print('Current Bot Version : ', bot_version)
    last_sent_time = time.time()
    msg = client.recv(1024).decode('utf-8')
    if msg == 'Invalid User':
        server_arr[0] = 0
        Invalide_User()
        return None
    if None[0:21] == 'Connection Successful':
        msg = msg.split(';;')
        print('Successfully logged In')
        print(' ')
        print('Keys :')
        print('s : start')
        print('d : stop ( It will stop After clearing current region)')
        if float(msg[1]) > float(bot_version):
            print('Please Use The Latest Version')
            time.sleep(6)
            return None
        discord_key = None[2]
        dicord_bytes = bytes(discord_key, 'ascii')
        for i in range(len(dicord_bytes)):
            discord_key_arr[i] = dicord_bytes[i]
        discord_key_arr[119] = len(dicord_bytes)
        if msg[3] != 'None':
            pop_up_handler(msg[3])
        server_arr[0] = 1


    if msg[0:8] == 'update_n':
        msg_content = (lambda .0: [ i for i in .0 ])(msg.split(';;'))
        if pop_up_update(1, msg_content[1], msg_content[2], bot_version) == 1:
            root_e = Tk()
            None(None, (lambda : root_e.destroy()))
            root_e.title('Info')
            label = Label(root_e, 'Download Will Be Started Soon. Kindly Do Not Close The Application', '#990000', 'white', **('text', 'fg', 'bg')).pack()
            root_e.mainloop()
            print('Connecting...')
            new_update_downloader(msg_content[1], msg_content[2])
            return None
        if None[0:8] == 'update_m':
            msg_content = (lambda .0: [ i for i in .0 ])(msg.split(';;'))
            if pop_up_update(2, msg_content[1], msg_content[2], bot_version) == 1:
                root_e = Tk()
                None(None, (lambda : root_e.destroy()))
                root_e.title('Info')
                label = Label(root_e, 'Download Will Be Started Soon. Kindly Do Not Close The Application', '#990000', 'white', **('text', 'fg', 'bg')).pack()
                root_e.mainloop()
                print('Connecting..')
                new_update_downloader(msg_content[1], msg_content[2])
            return None
        if None == 'Expired':
            user_expired()
            return None
        if None.is_pressed('d'):
            server_arr[0] = 0
    continue


def stoping_game(cmd_number):
    time.sleep(0.3)
    if keyboard.is_pressed('d'):
        cmd_number[1] = 0
    continue

if __name__ == '__main__':
    freeze_support()
    cmd_number = mp.Array('i', 3)
    settings = mp.Array('d', 15)
    server_arr = mp.Array('i', 3)
    for k in range(len(server_arr)):
        server_arr[k] = 0
    discord_key_arr = mp.Array('i', 120)
    cmd_number[0] = 0
    cmd_number[1] = 0
    cmd_number[2] = 0
    manager = Manager()
    size = py.size()
    if size[0] >= 1900:
        p1 = mp.Process(windows_1920, (cmd_number, settings, server_arr, discord_key_arr), **('target', 'args'))
        p2 = mp.Process(discord_commander, (cmd_number, server_arr, discord_key_arr), **('target', 'args'))
        p3 = mp.Process(server_communication, (server_arr, discord_key_arr), **('target', 'args'))
        p4 = mp.Process(stoping_game, (cmd_number,), **('target', 'args'))
    elif size[0] < 1900:
        p1 = mp.Process(windows_1366, (cmd_number, settings, server_arr, discord_key_arr), **('target', 'args'))
        p2 = mp.Process(discord_commander, (cmd_number, server_arr, discord_key_arr), **('target', 'args'))
        p3 = mp.Process(server_communication, (server_arr, discord_key_arr), **('target', 'args'))
        p4 = mp.Process(stoping_game, (cmd_number,), **('target', 'args'))
    p1.start()
    p2.start()
    p3.start()
    p4.start()
    return None
