import logging
import multiprocessing
from time import sleep

from pyautogui import locateOnScreen


from .kaynakislem import DosyaIslemleri, Fare, Tarayici, eminlikGetir, eminlikleriGetir, tiklamaNoktasiGetir, Varsayilanlar
from .sabitler import ENGEL_KONTROL_SURESI


class BasitEngelTarayici:
    def __init__(self) -> None:
        self.ornek_dler: list[str] = DosyaIslemleri.gorselleriGetir("engel")
        self.eminlikler: tuple[float, ...] = eminlikleriGetir(key_baslangic="engel_")
        self.gri_tarama = False

    def _ekranTara(self) -> int | None:
        for i, ornek_d in enumerate(self.ornek_dler):
            kare = locateOnScreen(ornek_d, confidence=self.eminlikler[i], grayscale=self.gri_tarama)
            if kare is not None:
                return len(self.ornek_dler) - i

    def engelKontrol(self) -> bool:
        ekranda_ilk_bulunan_engel = self._ekranTara()
        if ekranda_ilk_bulunan_engel is not None:
            return True
        return False


class EngelTarayiciİslem:
    def __init__(self) -> None:
        self.basit_engel_tarayici = BasitEngelTarayici()
        print(self.basit_engel_tarayici.ornek_dler)
        self.basit_engel_tarayici.gri_tarama = True
        dler = (
            DosyaIslemleri.gorselGetir("sehir_ikonu"),
            DosyaIslemleri.gorselGetir("moe_logo"),
            DosyaIslemleri.gorselGetir("baglanti_yok"),
            DosyaIslemleri.gorselGetir("oyundan_cik"),
            DosyaIslemleri.gorselGetir("baska_cihaz_baglandi"),  # FIXME: bu gorsel yok
            DosyaIslemleri.gorselGetir("dunya_ikonu"),
            DosyaIslemleri.gorselGetir("devam_et_buton"),
            DosyaIslemleri.gorselGetir("tamam_buton"),
        )
        eminlikler = (
            eminlikGetir("sehir_ikonu"),
            eminlikGetir("moe_logo"),
            eminlikGetir("baglanti_yok"),
            eminlikGetir("oyundan_cik"),
            eminlikGetir("baska_cihaz_baglandi"),
            eminlikGetir("dunya_ikonu"),
            eminlikGetir("devam_et_buton"),
            eminlikGetir("tamam_buton"),
        )
        self._sinyal = multiprocessing.Value("i", 0)  # 0: devam et, 1: bekle, 2: dur, 3: kapat
        self._sehirIkonuTarayici = Tarayici(dler[0], eminlikler[0], isim="engelTarayiciIslem.sehir_ikonu")
        self._moeLogoTarayici = Tarayici(dler[1], eminlikler[1], isim="engelTarayiciIslem.moe_logo")
        self._baglantiHatasiTarayici = Tarayici(dler[2], eminlikler[2], isim="engelTarayiciIslem.baglanti_yok")
        self._oyundanCikTarayici = Tarayici(dler[3], eminlikler[3], isim="engelTarayiciIslem.oyundan_cik")
        self._baskaCihazBaglandiTarayici = Tarayici(dler[4], eminlikler[4], isim="engelTarayiciIslem.baska_cihaz_baglandi")
        self._dunyaIkonuTarayici = Tarayici(dler[5], eminlikler[5], isim="engelTarayiciIslem.dunya_ikonu")
        self._devamEtButonTarayici = Tarayici(dler[6], eminlikler[6], isim="engelTarayiciIslem.devam_et_buton")
        self._tamamButonTarayici = Tarayici(dler[7], eminlikler[7], isim="engelTarayiciIslem.tamam_buton")
        # oyun uyarı ekranı geldiğinde basılan tamam butonu

        self.fare = Fare()

    def _gunlukcuBaslat(self) -> None:
        self._gunlukcu = logging.getLogger(__name__)
        self._gunlukcu.debug("gunlukcu baslatildi")

    def engelKontrol(self, bekleme_suresi=ENGEL_KONTROL_SURESI):
        def _sehirIkonuKontrol() -> bool:
            return self._sehirIkonuTarayici.ekranTara() is not None

        def _cikisKontrol() -> bool:
            return self._oyundanCikTarayici.ekranTara() is not None

        def _basitEngelKontrol() -> bool:
            return self.basit_engel_tarayici.engelKontrol()

        def _dunyaIkonuKontrol() -> bool:
            return self._dunyaIkonuTarayici.ekranTara() is not None

        def _devamEtButonTikla() -> None:
            devam_et_buton_konum = self._devamEtButonTarayici.ekranTara()
            if devam_et_buton_konum is not None:
                self.fare.solTikla(devam_et_buton_konum.merkez())
                self._gunlukcu.debug("devam et butonu tıklandı.")

        def _tamamButonTikla() -> None:
            tamam_buton_konum = self._tamamButonTarayici.ekranTara()
            if tamam_buton_konum is not None:
                self.fare.solTikla(tamam_buton_konum.merkez())
                self._gunlukcu.debug("tamam butonu tıklandı.")

        self._gunlukcuBaslat()
        self._gunlukcu.debug("Engel tarayıcı işlemi başlatıldı.")
        if not hasattr(self, "acik"):
            self.acik = multiprocessing.Event()

        while not self.acik.is_set():
            if _basitEngelKontrol():
                self._gunlukcu.debug("Engel bulundu.")
                self._sinyal.value = 1  # type: ignore
                sleep(bekleme_suresi / 5)
                self.fare.sagTikla()
                if _cikisKontrol():
                    self._gunlukcu.debug("Oyundan uyarı karesi bulundu.")
                    self.fare.sagTikla()

            if _cikisKontrol():
                self._gunlukcu.debug("Oyundan uyarı karesi bulundu.")
                self.fare.sagTikla()

            if _dunyaIkonuKontrol():
                self._gunlukcu.debug("dunya ikonu bulundu.")
                self.fare.solTikla(tiklamaNoktasiGetir("sehir_ikonu"))

            _devamEtButonTikla()
            _tamamButonTikla()

            # FIXME: bu kısım sefer yollamaya engel oluyor
            # dunya_ikon = self._dunyaIkonuTarayici.ekranTara()
            # if dunya_ikon is not None:
            #     self._gunlukcu.debug("dunya ikonu bulundu.")
            #     self._sinyal.value = 1  # type: ignore
            #     self.fare.solTikla(tiklamaNoktasiGetir("sehir_ikonu"))
            #     if self._sehirIkonuTarayici.ekranTara() is None:
            #         devam_et_buton = self._devamEtButonTarayici.ekranTara()
            #         while devam_et_buton is not None:
            #             self.fare.solTikla(devam_et_buton.merkez())
            #             self._gunlukcu.debug("devam et butonu tıklandı.")
            #             sleep(bekleme_suresi)
            #             devam_et_buton = self._devamEtButonTarayici.ekranTara()

            #     self._sinyal.value = 0  # type: ignore
            #     continue

            moe_logo_kare = self._moeLogoTarayici.ekranTara()
            self._gunlukcu.debug("moe logo kare: %s", moe_logo_kare)
            if moe_logo_kare is not None:
                self._sinyal.value = 1  # type: ignore
                self._moeLogoBekle(bekleme_suresi)

            baglanti_yok_kare = self._baglantiHatasiTarayici.ekranTara()
            self._gunlukcu.debug("baglanti yok kare: %s", baglanti_yok_kare)
            if baglanti_yok_kare is not None:
                self._sinyal.value = 1  # type: ignore
                while self._baglantiHatasiTarayici.ekranTara() is not None:
                    self.fare.solTikla(konum=tiklamaNoktasiGetir("baglanti_yok"))
                    sleep(bekleme_suresi)
                self._moeLogoBekle(bekleme_suresi)

            cikis_butonu_kare = self._oyundanCikTarayici.ekranTara()
            self._gunlukcu.debug("oyundan cik kare: %s", cikis_butonu_kare)
            if cikis_butonu_kare is not None:
                raise NotImplementedError("çıkış butonu tespit edildi")

            basla_cihaz_baglandi_kare = self._baskaCihazBaglandiTarayici.ekranTara()
            self._gunlukcu.debug("başla cihaz bağlandı kare: %s", basla_cihaz_baglandi_kare)
            if basla_cihaz_baglandi_kare is not None:
                self._sinyal.value = 2  # type: ignore
                raise NotImplementedError("başla cihaz bağlandı tespit edildi")

            if _sehirIkonuKontrol():
                self._gunlukcu.debug("şehir ikonu bulundu, sinyal 0 yapıldı.")
                self._sinyal.value = 0  # type: ignore

            sleep(ENGEL_KONTROL_SURESI)

    def _moeLogoBekle(self, kontrol_araligi) -> None:
        while self._moeLogoTarayici.ekranTara() is not None:
            sleep(kontrol_araligi)

    def __repr__(self) -> str:
        return f"{self.__class__.__name__}_(sinyal={self._sinyal.value})"  # type: ignore

    def processOlustur(self) -> multiprocessing.Process:
        self.acik = multiprocessing.Event()
        return multiprocessing.Process(target=self.engelKontrol, args=(10,))


"""
engel her 1 saniyede bir tarama yapılıyor
eğer basit engellerden biri varsa (engel*.png)
    - kaynaktarama isleme bekleme sinyali gönder
    - sağ tıkla

eğer spesifik olan engellerden biri varsa (sehir ikonu olmaması, moe logosu, bağlantı hatası, çıkış butonu)
    - bağlantı hatası
        - tekrar dene ' ye tıkla 
        - moe logosunu bekle
    - basla cihaz baglandi
        - bot yonetime durma sinyali gönder (belki kapatma sinyali)
    - eger moe logosu varsa
        - bot yonetime durma sinyali gönder
        - moe logosunu bekle

+ moe logosunu bekle


"""
